{"info":{"_postman_id":"54069f58-ddb6-4e7f-ac0e-88cdb291847d","name":"Day 14: OAuth","description":"## Instructions for Day 14: OAuth\n\n1.  **Get the challenge:** Fork [the parent collection `Day 14: OAuth`](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-0e372950-c58c-483d-aea9-fe676547e6f0) from the main workspace to your own public workspace.\n2.  **Read the documentation:** In your fork, select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder `Submit your solution` and follow the instructions in the documentation to validate your solution.\n    \n\n## Concepts covered\n\n*   [OAuth 2.0](https://learning.postman.com/docs/sending-requests/authorization/#oauth-20)\n*   [Variables](https://learning.postman.com/docs/sending-requests/variables/)\n*   [Scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n*   [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n    \n\n## Additional resources\n\n*   [OAuth 2.0](https://www.postman.com/postman/workspace/postman-team-collections/collection/1559645-e1dfc9cb-3de7-4a73-82cd-602334bae284?ctx=documentation) examples\n*   [OAuth 2.0: Implicit Flow is Dead, Try PKCE Instead](https://blog.postman.com/pkce-oauth-how-to/) blog\n*   [Generate Spotify Playlists using a Postman Collection](https://blog.postman.com/generate-spotify-playlists-using-a-postman-collection/) blog\n*   [OAuth](https://www.tiktok.com/@joycejetson/video/7068281874887560494) tiktok\n    \n\n## Next challenge\n\n*   [Write to file](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-b9204eb2-a00b-46b5-b011-89375b39d28b)","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"OAuth","item":[{"name":"github","event":[{"listen":"test","script":{"id":"9199f69e-bb3e-49cb-bdeb-729a920231a7","exec":["let response = pm.response.json();\r","\r","pm.test(\"Status code is 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","// Function to count occurrences of a specific key in the response\r","function countKeyOccurrences() {\r","  // Initialize count\r","  let count = 0;\r","\r","  // Iterate through each object in the response\r","  response.forEach(obj => {\r","    // Check if the key exists in the current object\r","    if (obj.hasOwnProperty('id')) {\r","      // Increment the count\r","      count++;\r","    }\r","  });\r","\r","  // Return the count\r","  return count;\r","}\r","\r","// Call the function and get the result\r","pm.collectionVariables.set('repoCount', countKeyOccurrences());\r","\r",""],"type":"text/javascript"}}],"id":"9cb010c2-ad05-4888-8b1f-35b6a124d21f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"https://api.github.com/user/repos","protocol":"https","host":["api","github","com"],"path":["user","repos"]}},"response":[]}],"id":"8f634563-9112-402d-ba62-07d38fcb73e0","description":"It's time to work on your next challenge.\n\nWith OAuth 2.0, you first retrieve an access token for the API, then use that token to authenticate future requests. Accessing data via the OAuth 2.0 flow varies greatly between API service providers, but typically involves a few requests back and forth between client application, user, and API. Let's use the GitHub API to learn more about OAuth.\n\n1. You will need your client ID and client secret [from GitHub](https://github.com/settings/applications/new) for the next step.\n    \n    - Homepage URL can be anything you want\n    - Authorization callback URL 30 Days of Postman: Coding Challenge for Developers\n        \n2. **Get an OAuth access token**: In Postman, select the **Authorization** tab for the folder `OAuth`, and select `OAuth 2.0` from the dropdown. Configure your authorization with these details according to [the GitHub API docs](https://docs.github.com/en/developers/apps/authorizing-oauth-apps#web-application-flow):\n    \n    - Token Name `github oauth`\n    - Auth URL `https://github.com/login/oauth/authorize`\n    - Access Token URL `https://github.com/login/oauth/access_token`\n    - Client ID (from the previous step)\n    - Client Secret (from the previous step)\n    \n    > Do NOT paste your client ID and client secret into the fields. Remember you are working in a public workspace. Use a variable as we have done in previous challenges. \n      \n    Click the **Get New Access Token** button, and proceed through the authorization flow in Postman to authorize the app.Click the **Use Token** button, and remember to set your access token as a variable.\n3. **Use access token**: Add a request called `github` in the folder `OAuth` with the following details.\n    \n    - `GET` request method\n    - `https://api.github.com/user/repos` request URL\n    \n    Under the **Authorization** tab, verify the request will `Inherit auth from parent`. Based on the folder-level configuration you set up in the previous step, Postman will automatically generate the authorization data when the request is sent. Look at the hidden headers under the **Headers** tab to see a `Bearer` token.\n4. **Add a test and script**:\n    - Add a Postman test to ensure a successful `200` response\n    - Add a script to determine how many repositories are returned in the response. Save this number as a collection variable called `repoCount`. Confirm the script is storing this data properly and [persist the data](https://learning.postman.com/docs/sending-requests/variables/#sharing-and-persisting-data) so that `INITIAL VALUE` is the same as `CURRENT VALUE`.\n\nOnce you complete these steps, save your changes and move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.","auth":{"type":"oauth2","oauth2":[{"key":"addTokenTo","value":"header","type":"string"}]},"event":[{"listen":"prerequest","script":{"id":"72543924-0019-4985-b0ad-731c10740138","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"59f45e5e-1e6b-4fbc-8164-4aa335c3b3e2","type":"text/javascript","exec":[""]}}]},{"name":"Submit your solution","item":[{"name":"submit","event":[{"listen":"test","script":{"id":"c6dcf302-408a-4822-92e1-3659930b4c82","exec":["// counter for passed tests\r","let pass = 0\r","let totalToPass = 6\r","\r","let collection = pm.response.json().collection\r","\r","pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {\r","    pm.expect(true);\r","    pass += 1\r","});\r","\r","pm.test(\"Status code is 200\", () => {\r","    pm.response.to.have.status(200);\r","    pass += 1\r","});\r","\r","pm.test(\"Correct collection returned\", () => {\r","    pm.expect(collection.info.name).equals(\"Day 14: OAuth\")\r","    pass += 1\r","})\r","\r","pm.test(\"Request added correctly\", () => {\r","    pm.expect(collection.item[0].item.length, 'check number of requests').equals(1)\r","\r","    let githubRequest = collection.item[0].item.find(req => { return req.name === \"github\"})\r","    pm.expect(githubRequest.name, 'check name').equals(\"github\")\r","    pm.expect(githubRequest.request.method, 'check method').equals(\"GET\")\r","    pm.expect(githubRequest.request.url.raw, 'check url').equals(\"https://api.github.com/user/repos\")\r","\r","    pass += 1\r","})\r","\r","pm.test(\"Scripts added correctly\", () => {\r","    let githubRequest = collection.item[0].item.find(req => { return req.name === \"github\"})\r","\r","    let test = githubRequest.event.find(event => {return event.listen === \"test\"})\r","    pm.expect(test.script.exec.toString(), 'check test').includes(\"pm.test\")\r","    pm.expect(test.script.exec.toString(), 'check collection variable set').includes(\"pm.collectionVariables.set\")\r","\r","    let variable = collection.variable.find(variable => { return variable.key == \"repoCount\"})\r","    pm.expect(variable.key, 'check collection variable name').equals(\"repoCount\")\r","    pm.expect(parseInt(variable.value), 'check collection variable value').to.be.at.least(0).and.at.most(30)\r","\r","    pass += 1\r","})\r","\r","pm.test(\"Auth added correctly\", () => {\r","    let oauthFolder = collection.item.find(folder => { return folder.name === \"OAuth\"})\r","\r","    pm.expect(oauthFolder.auth.type, 'check folder auth').equals(\"oauth2\")\r","\r","    pass += 1\r","})\r","\r","// visualization for test results\r","let template\r","if (pass == totalToPass) {\r","    template = `üç™ passing!\r","        <br />\r","        <img src=\"https://media2.giphy.com/media/11QY4zzd3mqHe/giphy.gif?cid=ecf05e47q95tyhyx6y4k6gzmwg24z6unewjjwfeb96vi66dy&rid=giphy.gif&ct=g\" />\r","    `\r","} else {\r","    template = `üôÖ please try again\r","        <br />\r","        <img src=\"https://media0.giphy.com/media/Swa5xQjSC7d1GND2g9/giphy.gif?cid=ecf05e47q95tyhyx6y4k6gzmwg24z6unewjjwfeb96vi66dy&rid=giphy.gif&ct=g\" />\r","    `\r","}\r","pm.visualizer.set(template)"],"type":"text/javascript"}}],"id":"837f0ff1-46e3-47d7-a53c-8fe3ed8e241f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"x-api-key","value":"{{postman_api_key}}","type":"text"}],"url":{"raw":"https://api.getpostman.com/collections/{{collectionUid}}","protocol":"https","host":["api","getpostman","com"],"path":["collections","{{collectionUid}}"]},"description":"It's time to submit your solution.\n\n1. **Use a Postman environment:** Find the `Postman API env` environment from the previous challenge. Update the `collectionUid` with the current collection's ID.\n1. **Validate your solution**: Save your changes in the collection and environment. Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge. Remember to save your changes as you'll need to pass all the challenges to claim a **30 days of Postman** badge."},"response":[]}],"id":"95abc017-f721-4a06-bf6d-d1328336ebe1","description":"Follow the instructions in the request documentation."}],"event":[{"listen":"prerequest","script":{"id":"1ce4d9b7-6ac7-4a23-8871-069cd38f12b0","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"4bdd6480-0777-41d5-bace-229cf88ba61d","type":"text/javascript","exec":[""]}}],"variable":[{"id":"ac590967-8923-4034-8f8a-9627f5594337","key":"repoCount","value":7}]}