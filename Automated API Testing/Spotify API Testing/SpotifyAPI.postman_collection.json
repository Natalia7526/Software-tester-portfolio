{
	"info": {
		"_postman_id": "0dcd86fb-5afa-4355-94e5-6c960779d5e5",
		"name": "SpotifyAPI",
		"description": "The **SpotifyAPI** collection includes unit and integration tests for the Spotify API. Official Spotify API documentation you can find here [<b>https://developer.spotify.com/documentation/web-api.</b>](https://developer.spotify.com/documentation/web-api)\n\n**Unit tests:**\n\n- Downloading Track Information Tests,\n- Searching for Tracks Tests,\n- Playing Tracks Tests,\n- Playlist Tests,\n- Authorization Tests,\n    \n\nStartFragment\n\n1. **Testy Autoryzacji:**\n    - Zweryfikuj, czy autoryzacja do API działa poprawnie, a nieuprawnione żądania są odrzucane.\n2. **Testy Obsługi Błędów:**\n    - Sprawdź, czy API prawidłowo reaguje na różne scenariusze błędów, takie jak błędne żądania, brakujące parametry itp.\n\nEndFragment\n\n**Integration tests:**\n\n- Integration Tests with Payment Systems,\n- Integration Tests with Mobile Applications,\n- Integration Tests with External Applications,\n- Performance Tests,\n- Pagination and Sorting Tests,\n- Security Tests,\n- Integration Tests with Cache",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21617616"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Variables\r",
									"let response;\r",
									"\r",
									"//Status Code Test\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    response = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response Body Structure Test\r",
									"pm.test(\"Response has expected JSON structure\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.response.to.have.jsonBody('access_token');\r",
									"    pm.response.to.have.jsonBody('token_type');\r",
									"    pm.response.to.have.jsonBody('expires_in');\r",
									"\r",
									"    //Set collection variable\r",
									"    console.log(response.access_token)\r",
									"    pm.collectionVariables.set('accessToken', response.access_token)\r",
									"\r",
									"});\r",
									"\r",
									"// Token Expiry Test\r",
									"pm.test(\"Token has a valid expiration time\", function () {\r",
									"    const expiresIn = pm.response.json().expires_in;\r",
									"    pm.expect(expiresIn).to.be.above(0); // Ensure expires_in is a positive value\r",
									"});\r",
									"\r",
									"// Token Type Test\r",
									"pm.test(\"Token type is Bearer\", function () {\r",
									"    pm.expect(pm.response.json().token_type).to.eql(\"Bearer\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "code",
									"value": "AQATBK1YDMZyzq2DNA3aDHZPI8lwgjOfCoegfIDMaJDUDCTdwpdQa3WdqP3Lm68fy6VRq1_Glal6jGxtI9WlO3KfndTAPm8dxhItpHeLcop6P8AE0CoJQaNaKgfhogJYXTb5o6aIm1xBc040kV_EBO4PBai3EeKMMuhMSNzIJL34i0AgD-SSbLjZJrUDgWkEOTXVWRKZ17gtTofVpEgk6C3cPTYoKQ&state=34fFs29kd09",
									"description": "temporary code valid for 3600 seconds since generation",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback",
									"description": "YOUR_REDIRECT_URI - Dashboard > Automation SpotifyAPI > Settings > Basic Information > Redirect URIs",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "133abba04d3d4316a986c27c18cfab5f",
									"description": "YOUR_CLIENT_ID - Dashboard > Automation SpotifyAPI > Settings > Basic Information > Client ID",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "c1266e5e5d4840ac9c1e798167b423d7",
									"description": "YOUR_CLIENT_SECRET - Dashboard > Automation SpotifyAPI > Settings > Basic Information > Client Secret",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://accounts.spotify.com/api/token",
							"protocol": "https",
							"host": [
								"accounts",
								"spotify",
								"com"
							],
							"path": [
								"api",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains requests dedicated to the authentication process for accessing the Spotify API. Follow these steps to obtain the necessary OAuth 2.0 access token for seamless interaction with the Spotify Web API. Ensure that you complete these requests before making any other API calls within the collection\n\n**Requests:**\n\n1. **Get Access Token:**\n    \n    - **Description:** Request to obtain OAuth 2.0 access token.\n        \n    - **Steps:**\n        \n        - Send client credentials for authorization.\n            \n        - Retrieve and store the access token for subsequent API calls.\n            \n    - **Note:** Update client credentials and parameters as per Spotify API documentation.\n        \n\n**Usage Guidelines:**\n\n- Execute \"Get Access Token\" before any other request in the collection.\n    \n- Ensure the access token is refreshed as per Spotify API token expiration policies.\n    \n- Review Spotify API documentation for any changes to authentication procedures.\n    \n\nBy organizing authentication-related requests into this dedicated folder, users can easily identify and manage the steps required to authenticate with the Spotify API. This clear structure enhances the usability and maintainability of the Postman collection."
		},
		{
			"name": "Unit Tests",
			"item": [
				{
					"name": "Albums",
					"item": [
						{
							"name": "Get album",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    response = pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all required data\", function () {\r",
											"    // Check if the response is an object\r",
											"    pm.expect(response).to.be.an('object');\r",
											"\r",
											"    // CHECK PARAMETERS\r",
											"    // album type is a string\r",
											"    pm.expect(response).to.have.property('album_type');\r",
											"    pm.expect(response.album_type).to.be.a('string');\r",
											"\r",
											"    // total tracks is an integer\r",
											"    pm.expect(response).to.have.property('total_tracks');\r",
											"    pm.expect(response.total_tracks).to.be.a('number'); // Change to 'number' instead of 'integer'\r",
											"\r",
											"    // available_markets is an array of strings\r",
											"    pm.expect(response).to.have.property('available_markets');\r",
											"    pm.expect(response.available_markets).to.be.an('array');\r",
											"\r",
											"    // Check if every item in the array is a string\r",
											"    pm.expect(response.available_markets.every(item => typeof item === 'string')).to.be.true;\r",
											"\r",
											"    // external_urls is an object\r",
											"    pm.expect(response).to.have.property('external_urls');\r",
											"    pm.expect(response.external_urls).to.be.an('object');\r",
											"\r",
											"    // href is a string\r",
											"    pm.expect(response).to.have.property('href');\r",
											"    pm.expect(response.href).to.be.a('string');\r",
											"\r",
											"    // id is a string\r",
											"    pm.expect(response).to.have.property('id');\r",
											"    pm.expect(response.id).to.be.a('string');\r",
											"\r",
											"    // Check if 'images' is an array\r",
											"    pm.expect(response.images).to.be.an('array');\r",
											"\r",
											"    // Iterate over each image object in the array\r",
											"    response.images.forEach(function (image, index) {\r",
											"        const imageContext = `Image #${index + 1}`;\r",
											"\r",
											"        // Check if 'url' is present and a string\r",
											"        pm.expect(image).to.have.property('url');\r",
											"        pm.expect(image.url).to.be.a('string', `${imageContext}: 'url' should be a string`);\r",
											"\r",
											"        // Check if 'height' is present and a number\r",
											"        pm.expect(image).to.have.property('height');\r",
											"        pm.expect(image.height).to.be.a('number', `${imageContext}: 'height' should be a number`);\r",
											"\r",
											"        // Check if 'width' is present and a number\r",
											"        pm.expect(image).to.have.property('width');\r",
											"        pm.expect(image.width).to.be.a('number', `${imageContext}: 'width' should be a number`);\r",
											"    });\r",
											"\r",
											"    // name is a string \r",
											"    pm.expect(response).to.have.property('name');\r",
											"    pm.expect(response.name).to.be.a('string');\r",
											"\r",
											"// release date and release_date_precision\r",
											"    pm.expect(response).to.have.property('release_date');\r",
											"    pm.expect(response.release_date).to.be.a('string');\r",
											"    pm.expect(response).to.have.property('release_date_precision');\r",
											"    pm.expect(response.release_date_precision).to.be.a('string');\r",
											"\r",
											"    let date_precision = [\"year\", \"month\", \"day\"];\r",
											"    if (date_precision.includes(response.release_date_precision)) {\r",
											"        if (response.release_date_precision === \"year\") {\r",
											"            pm.expect(response.release_date).to.match(/^\\d{4}$/);\r",
											"        } else if (response.release_date_precision === \"month\") {\r",
											"            pm.expect(response.release_date).to.match(/^\\d{4}-\\d{2}$/);\r",
											"        } else if (response.release_date_precision === \"day\") {\r",
											"            pm.expect(response.release_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"        } else {\r",
											"            // Handle unexpected release_date_precision value\r",
											"            pm.expect.fail(`Unexpected release_date_precision value: ${response.release_date_precision}`);\r",
											"        }\r",
											"    } else {\r",
											"        pm.expect.fail(`Invalid release_date_precision value: ${response.release_date_precision}`);\r",
											"    }\r",
											"\r",
											"    // type is a string\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response.type).to.be.a('string');\r",
											"    pm.expect(response.type).to.equal(\"album\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseSpotifyURL}}/albums/:id",
									"host": [
										"{{baseSpotifyURL}}"
									],
									"path": [
										"albums",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{album_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Integration Tests",
			"item": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "baseSpotifyURL",
			"value": "https://api.spotify.com/v1"
		},
		{
			"key": "track_id",
			"value": "11dFghVXANMlKmJXsNCbNl"
		},
		{
			"key": "album_id",
			"value": "4aawyAB9vmqN3uQ7FjRGTy",
			"type": "string"
		}
	]
}